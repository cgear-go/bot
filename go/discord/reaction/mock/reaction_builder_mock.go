// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jonathanarnault/cgear-go/go/discord/reaction (interfaces: ReactionBuilder)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reaction "github.com/jonathanarnault/cgear-go/go/discord/reaction"
)

// MockReactionBuilder is a mock of ReactionBuilder interface.
type MockReactionBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockReactionBuilderMockRecorder
}

// MockReactionBuilderMockRecorder is the mock recorder for MockReactionBuilder.
type MockReactionBuilderMockRecorder struct {
	mock *MockReactionBuilder
}

// NewMockReactionBuilder creates a new mock instance.
func NewMockReactionBuilder(ctrl *gomock.Controller) *MockReactionBuilder {
	mock := &MockReactionBuilder{ctrl: ctrl}
	mock.recorder = &MockReactionBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReactionBuilder) EXPECT() *MockReactionBuilderMockRecorder {
	return m.recorder
}

// AddFilter mocks base method.
func (m *MockReactionBuilder) AddFilter(arg0 reaction.FilterFn) reaction.ReactionBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilter", arg0)
	ret0, _ := ret[0].(reaction.ReactionBuilder)
	return ret0
}

// AddFilter indicates an expected call of AddFilter.
func (mr *MockReactionBuilderMockRecorder) AddFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilter", reflect.TypeOf((*MockReactionBuilder)(nil).AddFilter), arg0)
}

// Build mocks base method.
func (m *MockReactionBuilder) Build() reaction.Reaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(reaction.Reaction)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockReactionBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockReactionBuilder)(nil).Build))
}

// OnAdded mocks base method.
func (m *MockReactionBuilder) OnAdded(arg0 reaction.ReactionFn) reaction.ReactionBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAdded", arg0)
	ret0, _ := ret[0].(reaction.ReactionBuilder)
	return ret0
}

// OnAdded indicates an expected call of OnAdded.
func (mr *MockReactionBuilderMockRecorder) OnAdded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAdded", reflect.TypeOf((*MockReactionBuilder)(nil).OnAdded), arg0)
}

// OnRemoved mocks base method.
func (m *MockReactionBuilder) OnRemoved(arg0 reaction.ReactionFn) reaction.ReactionBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRemoved", arg0)
	ret0, _ := ret[0].(reaction.ReactionBuilder)
	return ret0
}

// OnRemoved indicates an expected call of OnRemoved.
func (mr *MockReactionBuilderMockRecorder) OnRemoved(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemoved", reflect.TypeOf((*MockReactionBuilder)(nil).OnRemoved), arg0)
}
