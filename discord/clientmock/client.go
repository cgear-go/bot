// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cgear-go/bot/discord/client (interfaces: Client)

// Package clientmock is a generated GoMock package.
package clientmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ChannelDelete mocks base method.
func (m *MockClient) ChannelDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelDelete indicates an expected call of ChannelDelete.
func (mr *MockClientMockRecorder) ChannelDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelDelete", reflect.TypeOf((*MockClient)(nil).ChannelDelete), arg0)
}

// ChannelGetCategory mocks base method.
func (m *MockClient) ChannelGetCategory(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelGetCategory", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelGetCategory indicates an expected call of ChannelGetCategory.
func (mr *MockClientMockRecorder) ChannelGetCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelGetCategory", reflect.TypeOf((*MockClient)(nil).ChannelGetCategory), arg0)
}

// ChannelMessageDelete mocks base method.
func (m *MockClient) ChannelMessageDelete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageDelete indicates an expected call of ChannelMessageDelete.
func (mr *MockClientMockRecorder) ChannelMessageDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageDelete", reflect.TypeOf((*MockClient)(nil).ChannelMessageDelete), arg0, arg1)
}

// ChannelMessageEdit mocks base method.
func (m *MockClient) ChannelMessageEdit(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageEdit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageEdit indicates an expected call of ChannelMessageEdit.
func (mr *MockClientMockRecorder) ChannelMessageEdit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEdit", reflect.TypeOf((*MockClient)(nil).ChannelMessageEdit), arg0, arg1, arg2)
}

// ChannelMessageSend mocks base method.
func (m *MockClient) ChannelMessageSend(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSend", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend.
func (mr *MockClientMockRecorder) ChannelMessageSend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockClient)(nil).ChannelMessageSend), arg0, arg1)
}

// ChannelPermissionDelete mocks base method.
func (m *MockClient) ChannelPermissionDelete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelPermissionDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelPermissionDelete indicates an expected call of ChannelPermissionDelete.
func (mr *MockClientMockRecorder) ChannelPermissionDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelPermissionDelete", reflect.TypeOf((*MockClient)(nil).ChannelPermissionDelete), arg0, arg1)
}

// GuildChannelTextCreate mocks base method.
func (m *MockClient) GuildChannelTextCreate(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildChannelTextCreate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannelTextCreate indicates an expected call of GuildChannelTextCreate.
func (mr *MockClientMockRecorder) GuildChannelTextCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelTextCreate", reflect.TypeOf((*MockClient)(nil).GuildChannelTextCreate), arg0, arg1)
}

// MessageReactionAdd mocks base method.
func (m *MockClient) MessageReactionAdd(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionAdd", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionAdd indicates an expected call of MessageReactionAdd.
func (mr *MockClientMockRecorder) MessageReactionAdd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionAdd", reflect.TypeOf((*MockClient)(nil).MessageReactionAdd), arg0, arg1, arg2)
}

// MessageReactionRemove mocks base method.
func (m *MockClient) MessageReactionRemove(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionRemove", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionRemove indicates an expected call of MessageReactionRemove.
func (mr *MockClientMockRecorder) MessageReactionRemove(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionRemove", reflect.TypeOf((*MockClient)(nil).MessageReactionRemove), arg0, arg1, arg2, arg3)
}

// UserChannelPermissionSet mocks base method.
func (m *MockClient) UserChannelPermissionSet(arg0, arg1 string, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelPermissionSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserChannelPermissionSet indicates an expected call of UserChannelPermissionSet.
func (mr *MockClientMockRecorder) UserChannelPermissionSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelPermissionSet", reflect.TypeOf((*MockClient)(nil).UserChannelPermissionSet), arg0, arg1, arg2, arg3)
}

// UserChannelPermissions mocks base method.
func (m *MockClient) UserChannelPermissions(arg0, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelPermissions", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelPermissions indicates an expected call of UserChannelPermissions.
func (mr *MockClientMockRecorder) UserChannelPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelPermissions", reflect.TypeOf((*MockClient)(nil).UserChannelPermissions), arg0, arg1)
}
