// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cgear-go/bot/discord/command (interfaces: Arguments)

// Package commandmock is a generated GoMock package.
package commandmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArguments is a mock of Arguments interface.
type MockArguments struct {
	ctrl     *gomock.Controller
	recorder *MockArgumentsMockRecorder
}

// MockArgumentsMockRecorder is the mock recorder for MockArguments.
type MockArgumentsMockRecorder struct {
	mock *MockArguments
}

// NewMockArguments creates a new mock instance.
func NewMockArguments(ctrl *gomock.Controller) *MockArguments {
	mock := &MockArguments{ctrl: ctrl}
	mock.recorder = &MockArgumentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArguments) EXPECT() *MockArgumentsMockRecorder {
	return m.recorder
}

// GetInt mocks base method.
func (m *MockArguments) GetInt(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt.
func (mr *MockArgumentsMockRecorder) GetInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockArguments)(nil).GetInt), arg0)
}

// GetString mocks base method.
func (m *MockArguments) GetString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockArgumentsMockRecorder) GetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockArguments)(nil).GetString), arg0)
}
